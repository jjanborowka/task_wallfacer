services:
  postgres:
    image: postgres
    container_name: my_postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: my_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: ["postgres", "-c", "log_statement=all"]
  backend:
    build: ./backend
    container_name: my_backend
    restart: always
    depends_on:
      - postgres
      - listener
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - DB_HOST=postgres
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=my_db
      - NODE_ENV=development
    volumes:
      - .:/backend
      - /backend/node_modules
  listener:
    build: ./blockchain-listener
    container_name: blockchain-listener
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    environment:
      - ADDRESS=0xf42f5795D9ac7e9D757dB633D693cD548Cfd9169
      - METAMASK_API_KEY=dc5a0385bedf44e69def4cd00e209091
      - DB_HOST=postgres
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=my_db
      - DB_PORT=5432
      - NODE_ENV=development
    volumes:
      - .:/blockchain-listener
      - /blockchain-listener/node_modules
    restart: always
  react-app:
    build: ./frontend
    container_name: frontend
    restart: always
    environment:
      - PORT=3003
    depends_on:
      - postgres
      - backend 
      - listener
    ports:
      - "3003:3003"
    volumes:
      - .:/frontend
      - /frontend/node_modules
    command: ["serve", "-s", "build"]
volumes:
  pgdata:
